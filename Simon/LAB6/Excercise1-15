//SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.10;
contract HelloWorld {
string public greet = "Hello World!";
}

// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

// Lab 6 – Exercises 1–12 Implementation
contract Factory {

    //  Exercise 2: This sets how many digits our product ID should have.
    uint public idDigits = 16;

    //  Exercise 3: We use this to ensure the random ID stays within 16 digits.
    uint public idModulus = 10 ** idDigits;

    //  Exercise 4: Struct represents the data for one product.
    struct Product {
        string name; // Product name
        uint id;     // Unique product ID
    }

    //  Exercise 5: Array to store all products created.
    Product[] public products;

    //  Exercise 10: Mapping product index to the owner's wallet address.
    mapping(uint => address) public productToOwner;

    //  Exercise 10: Mapping to count how many products each user owns.
    mapping(address => uint) public ownerProductCount;

    //  Exercise 9: Event is triggered every time a product is created.
    event NewProduct(uint ArrayProductId, string name, uint id);

    //  Exercise 6 & 11: Private function to add a new product to the array.
    // It emits the NewProduct event.
    function _createProduct(string memory _name, uint _id) private {
        // Add product to the array
        products.push(Product(_name, _id));

        // Get the ID of the newly added product (array index)
        uint productId = products.length - 1;

        // Trigger the event
        emit NewProduct(productId, _name, _id);
    }

    //  Exercise 7: Private function to generate a random ID using keccak256 hash
    function _generateRandomId(string memory _str) private view returns (uint) {
        // Create a hash from input string
        uint rand = uint(keccak256(abi.encodePacked(_str)));

        // Keep it within the correct number of digits
        return rand % idModulus;
    }

    //  Exercise 8 + 12: A user can call a public function to create a product.
    function createRandomProduct(string memory _name) public {
        // Generate a random ID from the name
        uint randId = _generateRandomId(_name);

        // Create the product
        _createProduct(_name, randId);

        //  Exercise 11: Assign ownership to the user who created the product
        uint productId = products.length - 1;
        productToOwner[productId] = msg.sender;

        // Increment the count of products owned by the sender
        ownerProductCount[msg.sender]++;
    }
}

//    Exercise - 13

// contracts/GLDToken.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract GLDToken is ERC20 {
    constructor(uint256 initialSupply) ERC20("Gold", "GLD") {
        _mint(msg.sender, initialSupply);
    }
}

//Exercise - 14 
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

contract Exercise14 {

    //  Mapping to store age of users based on a user ID (uint)
    mapping(uint => uint) public age;

    //  Modifier to check if the user's age is above or equal to required _age
    modifier olderThan(uint _age, uint _userId) {
        require(age[_userId] >= _age, "User is not old enough");
        _; // Continue execution if condition is true
    }

    //  Function that uses the modifier to check if the user is at least 18
    // This function does nothing inside — just acts as an access check.
    function validationUsers(uint _userId) public view olderThan(18, _userId) {
    }

    //  A helper function to set age
    function setAge(uint _userId, uint _age) public {
        age[_userId] = _age;
    }
}




///////////////////////////////Exercise - 15 ////////////////////////////////////////
// SPDX-License-Identifier: Simon Wakpal
pragma solidity ^0.8.0;

contract DemoContract {
    address public owner;
    uint public tokenPrice = 2 ether;

    struct Receiver {
        string name;
        uint tokens;
    }

    mapping(address => Receiver) public users;

    // Track owner token balance
    uint public ownerTokenBalance;

    // Only owner modifier
    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    constructor(uint initialSupply) {
        owner = msg.sender;
        ownerTokenBalance = initialSupply;
    }

    function registerUser(string memory _name) public {
        users[msg.sender] = Receiver(_name, 0);
    }

    function getPrice(uint _amount) public view returns (uint) {
        return _amount * tokenPrice;
    }

    // returns the value in ether for readability
    function getPriceInEther(uint _amount) public view returns (uint) {
        return (_amount * tokenPrice) / 1 ether;
    }

    // Buy tokens by sending Ether (1 token = 2 Ether)
    function buyToken(uint _amount) public payable {
        require(bytes(users[msg.sender].name).length > 0, "User not registered");
        require(msg.value >= _amount * tokenPrice, "Not enough Ether sent");
        require(ownerTokenBalance >= _amount, "Not enough tokens available");

        users[msg.sender].tokens += _amount;
        ownerTokenBalance -= _amount;
    }

    // Get contract's ETH balance
    function getContractBalance() public view returns (uint) {
        return address(this).balance;
    }

    // Allow owner to give tokens manually
    function giveToken(address _receiver, uint256 _amount) public onlyOwner {
        require(users[owner].tokens >= _amount, "Not enough tokens");
        users[owner].tokens -= _amount;
        users[_receiver].tokens += _amount;
    }

    // Allow Ether to be received
    receive() external payable {}
}
